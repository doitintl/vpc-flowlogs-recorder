AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - GenerateNgwAlarms
  - AWS::Serverless-2016-10-31
Description: SAM template automatic VPC Flow Log recording

Parameters:
  VPCFlowLogRetentionTimeDays:
    Description: The time in days to retain the log group
    Type: Number
    Default: 7
    AllowedValues: [1,3,5,7,14,30,60,90,120,150,180,365,400,545,731,1827,3653]
    ConstraintDescription: Must be one of the allowed values
      [1,3,5,7,14,30,60,90,120,150,180,365,400,545,731,1827,3653]

  LambdaLogGroupRetentionTimeDays:
    Description: The time in days to retain the Lambda log group
    Type: Number
    Default: 7
    AllowedValues: [1,3,5,7,14,30,60,90,120,150,180,365,400,545,731,1827,3653]
    ConstraintDescription: Must be one of the allowed values
      [1,3,5,7,14,30,60,90,120,150,180,365,400,545,731,1827,3653]

  EmailAddress:
    Type: String
    Description: The email address to subscribe to the SNS Topic
  
  NatGatewayIDs:
    Type: String
    Description: A comma separated list of the IDs of the NAT Gateways to alarm on

  SamplingPeriod:
    Type: Number
    Default: 60
    MinValue: 10
    Description: The sampling period in seconds

  EvaluationPeriods:
    Type: Number
    Default: 3
    MinValue: 1
    Description: The number of evaluation periods

  Threshold:
    Type: Number
    Default: 100000000
    MinValue: 1000
    Description: The threshold for the alarm
  
  DatapointsToAlarm:
    Type: Number
    Default: 1
    MinValue: 1
    Description: The number of datapoints that must be breaching the threshold to trigger the alarm
  
  RecordingTime:
    Type: Number
    Default: 900
    MinValue: 0
    Description: Number of seconds to record traffic. 0 means to record until the CloudWatch Alarm returns to OK.

  NumOfRecordings:
    Type: Number
    Default: 0
    MinValue: 0
    Description: How many recordings to perform. 0 = whenever there is an Alarm. Above 0 will record only the specified number of Alarms.

Resources:
  # DynamoDB table to manage number of recording and Step Function Wait Tokens
  NGWFlowlogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub
        - NGW-Flowlogs-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      AttributeDefinitions:
        - AttributeName: ngwid
          AttributeType: S
      KeySchema:
        - AttributeName: ngwid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # This CloudWatch Logs Group is used to store the VPC Flow Logs recordings
  VPCFlowLogsCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - Auto-VPC-FlowLogs-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      RetentionInDays: !Ref VPCFlowLogRetentionTimeDays
      LogGroupClass: INFREQUENT_ACCESS
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  
  # CloudWatch Logs Query for the VPCFlowLogsCloudWatchLogGroup
  MyLogInsightsQuery:
    Type: AWS::Logs::QueryDefinition
    Properties:
      Name: "Serverless Auto VPC Flow Log Recorder"
      QueryString: |
        fields @timestamp, @message
        | parse @message "* * * * * * * * * * * * * *" as action, flowDirection, trafficPathNum, srcAddr, srcPort, dstAddr, dstPort, proto, bytes, type, pkt_srcaddr, SrcService, pkt_dstaddr, DstService
        | display @timestamp, action, flowDirection, 
                if(trafficPathNum == 1, "Through another resource in the same VPC",
                if(trafficPathNum == 2, "Through an internet gateway or a gateway VPC endpoint",
                if(trafficPathNum == 3, "Through a virtual private gateway",
                if(trafficPathNum == 4, "Through an intra-region VPC peering connection",
                if(trafficPathNum == 5, "Through an inter-region VPC peering connection",
                if(trafficPathNum == 6, "Through a local gateway",
                if(trafficPathNum == 7, "Through a gateway VPC endpoint (Nitro-based instances only)",
                if(trafficPathNum == 8, "Through an internet gateway (Nitro-based instances only)",
                "unknown")))))))) as trafficPath,
                srcAddr, srcPort, dstAddr, dstPort, 
                if(proto == 6, "TCP",
                if(proto == 17, "UDP",
                proto)) as protocol,
                bytes, type, pkt_srcaddr, SrcService, pkt_dstaddr, DstService
        | sort @timestamp desc 
        | limit 1000
      LogGroupNames:
        - !Ref VPCFlowLogsCloudWatchLogGroup

  # Lambda responsible for creating the VPC Flow Log
  ActivateVPCFlowLogFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub
        - ActivateVPCFlowLog-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      Handler: activate_vpc_flow_log.lambda_handler
      Runtime: python3.12
      Architectures:
        - arm64
      CodeUri: ./src-activate
      Policies:
        - AWSLambdaExecute
        - CloudWatchLogsFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:CreateFlowLogs
                - ec2:DescribeFlowLogs
                - ec2:DeleteFlowLogs
                - ec2:DescribeNatGateways
              Resource: '*'
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: !GetAtt VPCFlowLogRole.Arn
      Environment:
        Variables:
          LOG_GROUP_NAME: !Ref VPCFlowLogsCloudWatchLogGroup
          VPC_FLOW_LOG_ROLE: !GetAtt VPCFlowLogRole.Arn

  # This is the CloudWatch Log Group used to store logs from the "ActivateVPCFlowLogFunction" Lambda
  ActivateVPCFlowLogFunctionCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ActivateVPCFlowLogFunction}
      RetentionInDays: !Ref LambdaLogGroupRetentionTimeDays
      LogGroupClass: INFREQUENT_ACCESS

  # This lambda is responsible for creating the Step Function Wait Token that is
  # used by the AlarmEndedFunction Lambda function to notify the Step Function to stop waiting
  StoreWaitTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub
        - StoreWaitToken-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      Handler: store_wait_token.lambda_handler
      Runtime: python3.12
      Architectures:
        - arm64
      CodeUri: ./src-store_wait_token
      Policies:
        - AWSLambdaExecute
        - CloudWatchLogsFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !GetAtt NGWFlowlogsTable.Arn
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: !GetAtt VPCFlowLogRole.Arn

  # This is the CloudWatch Log Group used to store logs from the "StoreWaitTokenFunction" Lambda function
  StoreWaitTokenFunctionCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${StoreWaitTokenFunction}
      RetentionInDays: !Ref LambdaLogGroupRetentionTimeDays
      LogGroupClass: INFREQUENT_ACCESS

  # This is the Lambda function that is called when the Alarm returns to OK
  AlarmEndedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub
        - VPCFlowLogs-AlarmEnded-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      Handler: notify_alarm_ended.lambda_handler
      Runtime: python3.12
      Architectures:
        - arm64
      CodeUri: ./src-notify_alarm_ended
      Policies:
        - AWSLambdaExecute
        - CloudWatchLogsFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt NGWFlowlogsTable.Arn
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
              Resource: !GetAtt StepFunction.Arn
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: !GetAtt VPCFlowLogRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NGWFlowlogsTable         

  # Add a permission for the EventBridge rule "CloudWatchEventRuleAlarmOff" to invoke the "AlarmEndedFunction" Lambda function
  AlarmEndedFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AlarmEndedFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudWatchEventRuleAlarmOff.Arn 

  # This is the CloudWatch Log Group used to store logs from the "AlarmEndedFunction" Lambda function
  AlarmEndedFunctionCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AlarmEndedFunction}
      RetentionInDays: !Ref LambdaLogGroupRetentionTimeDays
      LogGroupClass: INFREQUENT_ACCESS

  # This is the Step Function definition.
  # It is responsible for implementing the main logic of this solution
  StepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub
        - enable-vpc-fl-for-spikes-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      DefinitionSubstitutions:
        NumOfRecordings: !Ref NumOfRecordings
        TableName: !Ref NGWFlowlogsTable
        ActivateVPCFlowLogLambda: !Ref ActivateVPCFlowLogFunction
        WaitForTokenLambda: !Ref StoreWaitTokenFunction
        SNSTopic: !Ref NatGatewayFlowLogsTopic
        RecordingTime: !Ref RecordingTime
      DefinitionUri: ./step_function.asl.json
      Role: !GetAtt StepFunctionExecutionRole.Arn

  # The IAM Role assigned to the Step Function giving it permissions to access the resources it needs
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - lambda:InvokeFunction
                  - ec2:DeleteFlowLogs
                Resource: '*'
              - Effect: Allow
                Action:
                  - sns:publish
                Resource: !Ref NatGatewayFlowLogsTopic

  # Define the CloudWatch Event Rule for Nat Gateway Alarm ON
  CloudWatchEventRuleAlarmOn:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 
        - NatGatewayAlarmON-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      Description: EventBridge rule when a Nat Gateway is triggered by an Alarm on BytesInFromDestination or BytesInFromSource
      EventPattern:
        detail-type:
          - CloudWatch Alarm State Change
        source:
          - aws.cloudwatch
        detail:
          state:
            value:
              - ALARM
          configuration:
            metrics:
              metricStat:
                metric:
                  namespace:
                    - AWS/NATGateway
                  name:
                    - BytesInFromDestination
                    - BytesInFromSource
                  dimensions:
                    NatGatewayId:
                      !Split [",", !Ref NatGatewayIDs]             
      State: ENABLED
      Targets:
        - Arn: !Ref StepFunction
          Id: StepFunctionTarget
          RoleArn: !GetAtt CloudWatchEventAlarmOnRole.Arn

  # Define the Role for the CloudWatch Event Rule for Nat Gateway Alarm ON
  CloudWatchEventAlarmOnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowInvokeStepFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Ref StepFunction

  # Define the CloudWatch Event Rule for Nat Gateway Alarm Off
  CloudWatchEventRuleAlarmOff:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 
        - NatGatewayAlarmOFF-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      Description: EventBridge rule when a Nat Gateway is triggered by the end of an Alarm on BytesInFromDestination or BytesInFromD
      EventPattern:
        detail-type:
          - CloudWatch Alarm State Change
        source:
          - aws.cloudwatch
        detail:
          state:
            value:
              - OK
          configuration:
            metrics:
              metricStat:
                metric:
                  namespace:
                    - AWS/NATGateway
                  name:
                    - BytesInFromDestination
                    - BytesInFromSource
                  dimensions:
                    NatGatewayId:
                      !Split [",", !Ref NatGatewayIDs]
      State: ENABLED
      Targets:
        - Arn: !GetAtt AlarmEndedFunction.Arn
          Id: LambdaTarget

  # Define the Role for the CloudWatch Event Rule for Nat Gateway Alarm OFF
  CloudWatchEventRuleAlarmOffRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowInvokeLambdaFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt AlarmEndedFunction.Arn

  # This is the IAM Role for the VPC Flow Log so it can create Log Streams and populate them with recorded traffic
  VPCFlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VPCFlowLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'

  # The SNS Topic used to notify the email entered during deployment that a recording session ended.
  NatGatewayFlowLogsTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: 'NATGatewayFlowLogsRecorded'

  # This is used to create an email subscription to notify the email entered during deployment that a recording session ended.
  EmailSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties: 
      Protocol: 'email'
      Endpoint: !Ref EmailAddress
      TopicArn: !Ref NatGatewayFlowLogsTopic

# This section creates Output Deep Links in the CloudFormation Stack allowing direct access to various resources created during deployment
Outputs:
  ActivateVPCFlowLogFunction:
    Description: Activate VPC Flow Log Lambda Function Console Link
    Value: !Sub https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${ActivateVPCFlowLogFunction}

  StoreWaitTokenFunction:
    Description: Store Wait Token Lambda Function Console Link
    Value: !Sub https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${StoreWaitTokenFunction}

  AlarmEndedFunction:
    Description: Cloudwatch Nat Gateway Alarm Ended Function Console Link
    Value: !Sub https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${AlarmEndedFunction}    

  StepFunction:
    Description: ENI Flowlogs Step Function Console Link
    Value: !Sub https://console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/${StepFunction}

  NGWFlowlogsTable:
    Description: NGW Flowlogs DynamoDB Table Console Link
    Value: !Sub https://console.aws.amazon.com/dynamodb/home?region=${AWS::Region}#tables:selected=${NGWFlowlogsTable}

  NatGatewayFlowLogsTopicArn:
    Description: 'SNS Topic in the AWS Management Console'
    Value: !Sub 'https://console.aws.amazon.com/sns/v3/home?region=${AWS::Region}#/topic/${NatGatewayFlowLogsTopic}'

  VPCFlowLogsCloudWatchLogGroupLink:
    Description: "VPC Flow Logs CloudWatch Group"
    Value: !Sub
      - "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logStream:group=${LogGroupName}"
      - LogGroupName: !Ref VPCFlowLogsCloudWatchLogGroup
