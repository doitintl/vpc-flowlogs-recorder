AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - GenerateNgwAlarms
  - AWS::Serverless-2016-10-31
Description: SAM template automatic VPC Flow Log recording

Parameters:
  VPCFlowLogRetentionTimeDays:
    Description: The time in days to retain the log group
    Type: Number
    Default: 7
    AllowedValues: [1,3,5,7,14,30,60,90,120,150,180,365,400,545,731,1827,3653]
    ConstraintDescription: Must be one of the allowed values
      [1,3,5,7,14,30,60,90,120,150,180,365,400,545,731,1827,3653]

  LambdaLogGroupRetentionTimeDays:
    Description: The time in days to retain the Lambda log group
    Type: Number
    Default: 7
    AllowedValues: [1,3,5,7,14,30,60,90,120,150,180,365,400,545,731,1827,3653]
    ConstraintDescription: Must be one of the allowed values
      [1,3,5,7,14,30,60,90,120,150,180,365,400,545,731,1827,3653]

  EmailAddress:
    Type: String
    Description: The email address to subscribe to the SNS Topic
  
  NatGatewayIDs:
    Type: String
    Description: A comma separated list of the IDs of the NAT Gateways to alarm on

  SamplingPeriod:
    Type: Number
    Default: 60
    MinValue: 10
    Description: The sampling period in seconds

  EvaluationPeriods:
    Type: Number
    Default: 3
    MinValue: 1
    Description: The number of evaluation periods

  Threshold:
    Type: Number
    Default: 1000000
    MinValue: 1000
    Description: The threshold for the alarm
  
  DatapointsToAlarm:
    Type: Number
    Default: 1
    MinValue: 1
    Description: The number of datapoints that must be breaching the threshold to trigger the alarm

Resources:
  NGWFlowlogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub
        - NGW-Flowlogs-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      AttributeDefinitions:
        - AttributeName: ngwid
          AttributeType: S
      KeySchema:
        - AttributeName: ngwid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  VPCFlowLogsCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - Auto-VPC-FlowLogs-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      RetentionInDays: !Ref VPCFlowLogRetentionTimeDays
      LogGroupClass: INFREQUENT_ACCESS

  ActivateVPCFlowLogFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub
        - ActivateVPCFlowLog-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      Handler: activate_vpc_flow_log.lambda_handler
      Runtime: python3.12
      Architectures:
        - arm64
      CodeUri: ./src-activate
      Policies:
        - AWSLambdaExecute
        - CloudWatchLogsFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:CreateFlowLogs
                - ec2:DescribeFlowLogs
                - ec2:DeleteFlowLogs
                - ec2:DescribeNatGateways
              Resource: '*'
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: !GetAtt VPCFlowLogRole.Arn
      Environment:
        Variables:
          LOG_GROUP_NAME: !Ref VPCFlowLogsCloudWatchLogGroup
          VPC_FLOW_LOG_ROLE: !GetAtt VPCFlowLogRole.Arn

  ActivateVPCFlowLogFunctionCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ActivateVPCFlowLogFunction}
      RetentionInDays: !Ref LambdaLogGroupRetentionTimeDays
      LogGroupClass: INFREQUENT_ACCESS

  DeleteVPCFlowLogFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub
        - DeleteVPCFlowLog-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      Handler: delete_vpc_flow_log.lambda_handler
      Runtime: python3.12
      Architectures:
        - arm64
      CodeUri: ./src-delete
      Policies:
        - AWSLambdaExecute
        - CloudWatchLogsFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:CreateFlowLogs
                - ec2:DescribeFlowLogs
                - ec2:DeleteFlowLogs
              Resource: '*'

  DeleteVPCFlowLogFunctionCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteVPCFlowLogFunction}
      RetentionInDays: !Ref LambdaLogGroupRetentionTimeDays
      LogGroupClass: INFREQUENT_ACCESS

  StepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub
        - enable-vpc-fl-for-spikes-${Suffix}
        - Suffix: !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      Definition:
        Comment: "State Machine to record Nat Gateway spikes in a VPC Flow Log"
        StartAt: "Check-NGW-ID"
        States:
          ActivateVPCFlowLog:
            Next: "Wait15Minutes"
            Parameters:
              ngwid.$: "$.ngwid"
            Resource: "arn:aws:lambda:us-east-1:992382399522:function:ActivateVPCFlowLog-0ee81731ed79"
            ResultPath: "$.taskresult"
            Type: "Task"
          AddNGW-ID:
            Next: "ActivateVPCFlowLog"
            Parameters:
              Item:
                ngwid:
                  S.$: "$.ngwid"
              TableName: "NGW-Flowlogs-0ee81731ed79"
            Resource: "arn:aws:states:::dynamodb:putItem"
            ResultPath: null
            Type: "Task"
          Check-NGW-ID:
            InputPath: "$.detail.configuration.metrics[0].metricStat.metric.dimensions.NatGatewayId"
            Next: "NGW-ID-Exists?"
            Parameters:
              Key:
                ngwid.$: "$"
              TableName: "NGW-Flowlogs-0ee81731ed79"
            Resource: "arn:aws:states:::dynamodb:getItem"
            ResultPath: "$.taskresult"
            Type: "Task"
          DeleteVPCFlowLog:
            Next: "NotifySNS"
            Parameters:
              FlowLogIds.$: "$.taskresult.body.FlowLogIds"
            Resource: "arn:aws:lambda:us-east-1:992382399522:function:DeleteVPCFlowLog-0ee81731ed79"
            Type: "Task"
            ResultPath: null
          Extract-NGW-ID:
            Next: "AddNGW-ID"
            Type: "Pass"
            Parameters:
              ngwid.$: "$.detail.configuration.metrics[0].metricStat.metric.dimensions.NatGatewayId"
          NGW-ID-Exists?:
            Choices:
              - IsPresent: true
                Next: "VPCflAlreadyRecorded"
                Variable: "$.taskresult.Item.ngwid.S"
            Default: "Extract-NGW-ID"
            Type: "Choice"
          NotifySNS:
            End: true
            Parameters:
              Message.$: "States.Format('The VPC Flow Logs has been recorded for Nat Gateway {}\nCloudWatch Logs Group {}\nStream Prefix {}\n', $.ngwid, 'https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logsV2:log-groups/log-group/Auto-VPC-FlowLogs-0ee81731ed79', $.taskresult.body.ENIs)"
              Subject: "Nat Gateway VPC Flow Log Recorded"
              TopicArn: "arn:aws:sns:us-east-1:992382399522:NATGatewayFlowLogsRecorded"
            Resource: "arn:aws:states:::sns:publish"
            Type: "Task"
          VPCflAlreadyRecorded:
            End: true
            Parameters:
              Message: "Flow Log was already recorded for NatGateway"
              ngwid.$: "$.taskresult.Item.ngwid.S"
            Type: "Pass"
          Wait15Minutes:
            Next: "DeleteVPCFlowLog"
            Seconds: 900
            Type: "Wait"
      Role: !GetAtt StepFunctionExecutionRole.Arn

  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - lambda:InvokeFunction
                Resource: '*'
              - Effect: Allow
                Action:
                  - sns:publish
                Resource: !Ref NatGatewayFlowLogsTopic

  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventBridge rule for CloudWatch Alarm State Change
      EventPattern:
        detail-type:
          - CloudWatch Alarm State Change
        source:
          - aws.cloudwatch
        detail:
          state:
            value:
              - ALARM
          configuration:
            metrics:
              metricStat:
                metric:
                  namespace:
                    - AWS/NATGateway
                  name:
                    - BytesInFromDestination
      State: ENABLED
      Targets:
        - Arn: !Ref StepFunction
          Id: StepFunctionTarget
          RoleArn: !GetAtt CloudWatchEventRole.Arn

  CloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowInvokeStepFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Ref StepFunction

  VPCFlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VPCFlowLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'

  NatGatewayFlowLogsTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: 'NATGatewayFlowLogsRecorded'

  EmailSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties: 
      Protocol: 'email'
      Endpoint: !Ref EmailAddress
      TopicArn: !Ref NatGatewayFlowLogsTopic

Outputs:
  ActivateVPCFlowLogFunction:
    Description: Activate VPC Flow Log Lambda Function Console Link
    Value: !Sub https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${ActivateVPCFlowLogFunction}

  DeleteVPCFlowLogFunction:
    Description: Delete VPC Flow Log Lambda Function Console Link
    Value: !Sub https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${DeleteVPCFlowLogFunction}

  StepFunction:
    Description: ENI Flowlogs Step Function Console Link
    Value: !Sub https://console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/${StepFunction}

  NGWFlowlogsTable:
    Description: NGW Flowlogs DynamoDB Table Console Link
    Value: !Sub https://console.aws.amazon.com/dynamodb/home?region=${AWS::Region}#tables:selected=${NGWFlowlogsTable}

  NatGatewayFlowLogsTopicArn:
    Description: 'SNS Topic in the AWS Management Console'
    Value: !Sub 'https://console.aws.amazon.com/sns/v3/home?region=${AWS::Region}#/topic/${NatGatewayFlowLogsTopic}'

  VPCFlowLogsCloudWatchLogGroupLink:
    Description: "VPC Flow Logs CloudWatch Group"
    Value: !Sub
      - "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logStream:group=${LogGroupName}"
      - LogGroupName: !Ref VPCFlowLogsCloudWatchLogGroup

  # NATGatewayAlarmLink:
  #   Description: "Link to the NAT Gateway CloudWatch Alarm"
  #   Value: !Sub
  #     - "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#alarmsV2:alarm/${AlarmName}"
  #     - AlarmName: !Ref NATGatewayAlarm